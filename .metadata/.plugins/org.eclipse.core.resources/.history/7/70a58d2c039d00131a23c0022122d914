package DynamicProgramming;

import java.util.Scanner;

public class Solution {
	
	public static final int Max = 1000;
	public static long modMult(long x, long y, long module){
		
		long tempX = x > module ? x % module : x;
		long tempy = y > module ? y % module : y;
		long tempResult = (tempX) * (tempy);
		
		return tempResult > module ? (tempResult) % module : tempResult;
	}
	
	public static long getNumCombosFor1MWall(long M, long modulo){ // array indexed by M
		
		long[] array = new long[Max];
		
		for(int i = 1 ; i <=  M ; i ++){
			
			if(i == 1)
				array[i] = 1;
			if(i == 2)
				array[i] = 2;
			if(i == 3)
				array[i] = 4;
			if(i == 4)
				array[i] = 8;
			
			if(i >= 5){
				array[i] =  ( (array[i-1] % modulo) + (array[i-2] % modulo) + (array[i-3] % modulo) + (array[i-4] % modulo) ) % modulo;
			}
			
		}
		
		return array[M];
		
	}
	
	public static long getModNumCombsForNMWall(int M , int N , int module){
		
		
		
		long numCombsFor1MWall = Solution.getNumCombosFor1MWall(M, module);
		long numCombsForNMWall = 1;
		for(int i = 1 ; i <= N ; i ++){
			numCombsForNMWall = Solution.modMult(numCombsForNMWall, numCombsFor1MWall, module);
		}
		return numCombsForNMWall;
		
	}
	
	public static long getModPowerOf2(int N , long modulo){
		
		return (2 << N-1) % modulo ;
		
	}
	
	public static long getNumCombsForSolidWall(int M , int N , int module){
		
		long[] array = new long[Max]; // array is indexed by M for the give value of N
		
		for(int m = 1 ; m <= M ; m ++){

			if(m == 1)
					array[m] = 1;

			if(m == 2){
					array[m] = Solution.getModPowerOf2(N, module) - 1;
			}

			if(m == 3){
					array[m] = Solution.getModPowerOf2(2*N, module)  - 2 * Solution.getModPowerOf2(N, module) + 1;

			}

			if(m == 4){
					array[m] = ( Solution.getModPowerOf2(3*N, module) - 3 * Solution.getModPowerOf2(2*N, module) + 3 * Solution.getModPowerOf2(N, module) - 1);
			}

			if( m >= 5 ){
				
			 array[m] = Solution.getModNumCombsForNMWall(m, N, module);

			for(int i = 1 ; i <= m -1 ; i ++){
				array[m] -= array[i] * getModNumCombsForNMWall(m-i, N, module);
			}

			while (array[m] < 0 )
				array[m] +=  module;

			}
			
		}
		return array[M];
	}
		
		
	public static void main(String[] args){
		
		Scanner sc = new Scanner(System.in);
		int module = 1000000007;
		int T = sc.nextInt();
		for(int i = 0 ; i <= T - 1 ; i ++){
			int N = sc.nextInt();
			int M = sc.nextInt();
			
			System.out.println(Solution.getNumCombsForSolidWall(M, N, module));
		}
	
	}

}
