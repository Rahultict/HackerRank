package DynamicProgramming;

import java.util.Scanner;

public class LegoBlocks {
	
	
	public static long modMult(long x, long y, long module){
		return ( (x % module) * (y % module) ) % module;
	}
	
	public static long getNumCombosFor1MWall(long M, long modulo){
		
		if(M == 1)
			return 1;
		
		if(M == 2)
			return 2;
		
		if(M == 3)
			return 4;
		
		return ( (getNumCombosFor1MWall(M - 1, modulo)) % modulo + ( getNumCombosFor1MWall(M - 2, modulo) ) % modulo + ( getNumCombosFor1MWall(M - 3, modulo) % modulo) ) % modulo;
		
	}
	
	public static long getModNumCombsForNMWall(int M , int N , int module){
		
		long numCombsFor1MWall = LegoBlocks.getNumCombosFor1MWall(M, module);
		long numCombsForNMWall = 1;
		for(int i = 1 ; i <= N ; i ++){
			numCombsForNMWall = LegoBlocks.modMult(numCombsForNMWall, numCombsFor1MWall, module);
		}
		return numCombsForNMWall;
		
	}
	
	public static long getNumCombsForSolidWall(int M , int N , int module){
		
		long modNumCombsForSolidWall = LegoBlocks.getModNumCombsForNMWall(M, N, module);
		
		for(int i = 1 ; i <= M -1 ; i ++){
			
			modNumCombsForSolidWall -= getModNumCombsForNMWall(i, N, module) * getModNumCombsForNMWall(M-i, N, module);
		}
		
		while (modNumCombsForSolidWall < 0 )
			modNumCombsForSolidWall = modNumCombsForSolidWall + module;
		
		return modNumCombsForSolidWall;
		
	}
	
	public static void main(String[] args){
		
		Scanner sc = new Scanner(System.in);
		long module = 1000000007;
		int T = sc.nextInt();
		for(int i = 0 ; i <= T - 1 ; i ++){
			int N = sc.nextInt();
			int M = sc.nextInt();
			
			System.out.println(LegoBlocks.getNumCombsForSolidWall(M, N, module));
		}
		
	}

}
