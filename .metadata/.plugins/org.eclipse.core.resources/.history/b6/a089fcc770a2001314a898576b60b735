package DynamicProgramming;

import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

public class Solution {
	
	public static int getNumOccurencesEqualToOrHigher(int m , List<Integer> list){
		int numEqualOrHigher = 0;
		
		for(int stickHeight : list){
			if(stickHeight >= m)
				numEqualOrHigher++;
		}
		
		return numEqualOrHigher;
	}
	
	
	public static void main(String[] args){
		
		Scanner sc = new Scanner(System.in);
		
		int T = sc.nextInt();
		
		for(int i = 0 ; i < T ; i ++){
			
			int N = sc.nextInt();
			List<Integer> list = new LinkedList<Integer>();
			
			for(int j = 0 ; j < N ; j ++)
				list.add(sc.nextInt());
			
			double expectedValue = 0.0; 
			for(int k : list)
				expectedValue +=  ( (double)  ( N + 1 ) ) / (Solution.getNumOccurencesEqualToOrHigher(k, list) + 1 )  ; 
			
			System.out.println( Math.round(expectedValue * 100.0) / 100.0);
			
		}
		
	}

}
