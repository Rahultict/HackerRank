package Interview;

public class CheckIfBinaryTreeIsBinarySearchTree {

	public static boolean checkIfBST(Node root){
		
		if(root == null)
			return false;
		
		boolean resultLeft = false;
		boolean resultRight = false;
		
		if(root.getRight() != null){
			if(root.getValue() <= root.getRight().getValue()){
				resultLeft = checkIfBST(root.getRight());
			}else{
				return false;
			}
		}
		
		if(root.getLeft() != null){
			if(root.getValue() >= root.getLeft().getValue()){
				resultRight = checkIfBST(root.getLeft());
			}else{
				return false;
			}
			
		}
		
		return (resultLeft && resultRight);
		
	}
	
	
	public static void main(String[] args) {

		Node node1 = new Node(1);
		Node node2 = new Node(2);
		Node node3 = new Node(3);
		Node node4 = new Node(4);
		Node node5 = new Node(5);
		Node node6 = new Node(6);
		Node node7 = new Node(7);
		Node node8 = new Node(8);
		Node node9 = new Node(9);

		node3.setLeft(node1);
		node1.setRight(node2);

		node3.setRight(node5);
		node5.setLeft(node4);
		node5.setRight(node7);

		node7.setRight(node8);
		node7.setLeft(node6);
		node7.setLeft(node6);

		node7.setRight(node9);
		
		boolean result = checkIfBST(node3);
		System.out.println(result);
		
	}

}
